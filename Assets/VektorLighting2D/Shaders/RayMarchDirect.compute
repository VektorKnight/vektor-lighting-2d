/* Performs ray marching against a scene using direct light sampling.
 * Generally faster than the uniform version but produces less accurate results with no support for
 * bounces/indirect lighting. 
 * Emissive polygon shapes are also problematic with this method.
*/ 

#pragma kernel InitializeRays;
#pragma kernel SphereTrace;
#pragma kernel GenerateResult;

#include "RayMarchCommon.cginc"

// General config.
uint MaxSteps;
uint MaxBounces;

uint PixelsPerBatch;
uint BatchOffset;
uint FrameEven;

// Screen stuff.
uint Width;
uint Height;
float RenderScale;

// Camera conversion.
float4x4 InverseProjection;
float4x4 InverseWorld;
float PixelSize;

// Light buffers.
StructuredBuffer<PointLight> PointLights;
StructuredBuffer<SpotLight> SpotLights;
StructuredBuffer<PolygonLight> PolygonLights;
StructuredBuffer<Segment> LightSegments;

// Occluder buffers.
StructuredBuffer<Circle> CircleShapes;
StructuredBuffer<Rect> RectShapes;
StructuredBuffer<Polygon> PolygonShapes;
StructuredBuffer<Segment> ShapeSegments;

// Rays and result.
ConsumeStructuredBuffer<Ray> InputRays;
AppendStructuredBuffer<Ray> OutputRays;

RWStructuredBuffer<int> RayCounter;

RWStructuredBuffer<uint> Accumulation;
RWTexture2D<float4> Result;

float SceneDistance(const float2 position) {
    float distance = 1e8;

    // Test against all circles.
    uint nc, cs;
    CircleShapes.GetDimensions(nc, cs);
    for (uint j = 0; j < nc; j++) {
        const Circle circle = CircleShapes[j];

        if (!circle.enabled) {
            continue;
        }
        
        const float circle_dist = CircleSDF(circle, position);

        distance = min(distance, circle_dist);
    }

    // Test against all rects.
    uint rc, rs;
    RectShapes.GetDimensions(rc, rs);
    for (uint i = 0; i < rc; i++) {
        const Rect rect = RectShapes[i];

        if (!rect.enabled) {
            continue;
        }
        
        const float rect_dist = RectSDF(rect, position);

        distance = min(distance, rect_dist);
    }
    
    return distance;
}

float SceneLipschitz(const float2 a, const float2 b) {
    return SceneDistance(a) + SceneDistance(b);
}

// Add the color contribution of a ray to the accumulation buffer.
void AddRayContribution(const Ray ray, const float scale) {
    // Build packed RGBA value.
    // Alpha is ignored since it just gets hard-set later.
    const float3 color = ray.color * scale;
    
    const uint3 v = uint3 (
        (uint)(color.r * 255) & 0xFF,
        (uint)(color.g * 255) & 0xFF,
        (uint)(color.b * 255) & 0xFF
    );
    
    uint current = 0;
    uint original = 0;
    while (true) {
        const uint updated = AddPacked(current, v);
        InterlockedCompareExchange(Accumulation[ray.id], current, updated, original);
        if (original == current) {
            break;
        }

        current = original;
    }
}

// Generates rays for all light sources for which the position is within the influence of.
void GeneratePointLightRays(const float2 position, const uint id) {
    // Point lights.
    uint pc, ps;
    PointLights.GetDimensions(pc, ps);
    for (uint i = 0; i < pc; i++) {
        const PointLight point_light = PointLights[i];

        // Skip if not enabled.
        if (!point_light.enabled) {
            continue;
        }
        
        const float light_dist = distance(position, point_light.position);
        const float scene_dist = SceneDistance(position);
        
        // Skip if ray origin is outside the light's influence or inside an occluder.
        if (light_dist > point_light.radius || scene_dist < PixelSize) {
            continue;
        }
        
        const float falloff = 1.0 - clamp(light_dist / point_light.radius, 0, 1);
        const float attenuation = falloff * falloff;
        
        Ray ray;
        ray.id = id;
        ray.color = point_light.color * attenuation;
        ray.origin = position;
        ray.direction = normalize(point_light.position - position);
        ray.light_distance = light_dist;

        OutputRays.Append(ray);
    }
}

// Generates rays for all light sources for which the position is within the influence of.
void GenerateSpotLightRays(const float2 position, const uint id) {
    // Point lights.
    uint count, _;
    SpotLights.GetDimensions(count, _);
    for (uint i = 0; i < count; i++) {
        const SpotLight spot_light = SpotLights[i];

        // Skip if not enabled.
        if (!spot_light.enabled) {
            continue;
        }
        
        const float light_dist = distance(position, spot_light.position);
        const float scene_dist = SceneDistance(position);
        
        // Skip if ray origin is outside the light's influence or inside an occluder.
        if (light_dist > spot_light.radius || scene_dist < PixelSize) {
            continue;
        }

        // Skip if ray is coming from behind the cone.
        const float2 direction = normalize(spot_light.position - position);
        const float ray_fac = dot(direction, (spot_light.cone.xy + spot_light.cone.zw) * 0.5);
        if (ray_fac > EPSILON) {
            continue;
        }

        // Calculate contribution with dot product of the cone vectors.
        const float ray_dot = min(dot(-direction, spot_light.cone.xy), dot(-direction, spot_light.cone.zw));

        // Scaling the dot by some constant controls how hard the light falls off towards the edges of the cone.
        // A value of 10 just happens to be nice here.
        const float cone_fac = clamp(ray_dot * 10, 0, 1);

        // Calculate falloff and attenuation based on distance and cone factor.
        const float falloff = 1.0 - clamp(light_dist / spot_light.radius, 0, 1);
        const float attenuation = (falloff * falloff) * cone_fac;

        // Skip if attenuation is extremely small.
        if (attenuation < EPSILON) {
            continue;
        }

        // Create and add the ray.
        Ray ray;
        ray.id = id;
        ray.color = spot_light.color * attenuation;
        ray.origin = position;
        ray.direction = direction;
        ray.light_distance = light_dist;

        OutputRays.Append(ray);
    }
}

// Generates rays for all light sources for which the position is within the influence of.
void GeneratePolygonLightRays(const float2 position, const uint id) {
    uint pc, ps;
    PolygonLights.GetDimensions(pc, ps);
    for (uint i = 0; i < pc; i++) {
        const PolygonLight polygon_light = PolygonLights[i];

        // Skip if not enabled.
        if (!polygon_light.enabled) {
            continue;
        }
        
        const float2 nearest = ClosestPointOnPolygon(polygon_light.offset, polygon_light.count, LightSegments, position);
        
        const float light_dist = PolygonSDF(polygon_light.offset, polygon_light.count, LightSegments, position);
        const float scene_dist = SceneDistance(position);
        
        // Skip if ray origin is outside the light's influence or inside an occluder.
        if (light_dist > polygon_light.radius || scene_dist < PixelSize) {
           continue;
        }
        
        const float falloff = 1.0 - clamp(light_dist / polygon_light.radius, 0, 1);
        
        Ray ray;
        ray.id = id;
        ray.color = polygon_light.color * (falloff * falloff);
        ray.origin = position;
        ray.direction = normalize(nearest - position);
        ray.light_distance = light_dist;
        
        // Skip and just add contribution if ray starts within the light.
        if (light_dist < EPSILON) {
            AddRayContribution(ray, 1.0);
            continue;
        }

        OutputRays.Append(ray);
    }
}

// Generates rays for each pixel.
[numthreads(64, 1, 1)]
void InitializeRays (const uint3 thread_id : SV_DispatchThreadID, const uint3 group_id : SV_GroupThreadID) {
    // Exit early on dummy dispatches.
    const uint offset_id = thread_id.x + BatchOffset;
    if (thread_id.x >= PixelsPerBatch || offset_id >= Width * Height) {
        return;
    }
    
    // Calculate pixel Id.
    const uint2 pixel = uint2(offset_id % Width, offset_id / Width);

    // Even/odd column swap.
    if ((pixel.x + pixel.y) & 1 > FrameEven) {
        return;
    }

    // Reset accumulation buffer.
    Accumulation[offset_id] = 0;

    // Calculate current pixel and world position.
    const float2 origin = ScreenToWorld(InverseWorld, InverseProjection, float2(Width, Height) * RenderScale, float2(pixel.x, pixel.y) * RenderScale);
    
    // Generate rays for this pixel.
    GeneratePointLightRays(origin, offset_id);
    GenerateSpotLightRays(origin, offset_id);
    GeneratePolygonLightRays(origin, offset_id);
}

// Marches each ray once and adds their contribution to the accumulation buffer.
// Rays which hit something other than their target light will generate bounce rays if enabled.

groupshared Ray _groupRays[64];
groupshared uint _groupRayCount;

[numthreads(64, 1, 1)]
void SphereTrace (uint3 id : SV_DispatchThreadID) {
    // Check counter value to make sure we don't run off the end.
    int original = 0;
    InterlockedAdd(RayCounter[0], -1, original);
    if (original < 0) {
        return;
    }
    
    // Pop a ray.
    const Ray ray = InputRays.Consume();

    // March ray.
    float light_contribution = 1.0;
    float ray_distance = PixelSize;
    for (uint i = 0; i < MaxSteps; i++) {
        // Hit the light.
        if (ray_distance >= ray.light_distance) {
            AddRayContribution(ray, clamp(light_contribution * 4, EPSILON, 1));
            break;
        }

        // Hit something else.
        const float2 ray_pos = ray.origin + ray.direction * ray_distance;
        const float scene_dist = SceneDistance(ray_pos);
        if (scene_dist < PixelSize) {
            break;
        }

        // This seems to generate nice shadows.
        light_contribution = min(light_contribution, scene_dist);

        // Keep going.
        ray_distance += scene_dist;
    }
}

// Generates the final output texture from the accumulation buffer.
[numthreads(8, 8, 1)]
void GenerateResult(uint3 id : SV_DispatchThreadID) {
    // Exit early on dummy dispatches.
    if (id.x >= Width || id.y >= Height) {
        return;
    }
    
    const uint packed = Accumulation[id.x + id.y * Width];

    // Defined in reverse order due to a Unity bug with Vulkan.
    // No doing so results in the blue value always being zero.
    const uint b = (packed >> 16) & 0xFF;
    const uint g = (packed >> 8) & 0xFF;
    const uint r = packed & 0xFF;
    
    const float4 final = float4(
        (float)r / 255.0,
        (float)g / 255.0,
        (float)b / 255.0,
        1.0
    );

    Result[id.xy] = final;
}
